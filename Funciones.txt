BACK: 


    FUNCIONES DEFINIDAS EN EL BACK:

        Main basarse en Advanced Finite State machine!!! 
        
        void vidas(int delta);
            Param delta: El cambio a aplicar a las vidas (1: suma vida, -1 resta vida, 0 mantiene vidas) 
        
        void menu (int option);
            Param option: case restart, case new game, case score, case return game;

        void onCollisionDetected(int isColission);        
            Param isColission: es avisada por el front si hubo colision o no.
            La funcion hace lo que deba hacer despues de una colision
            Decrementar vida, o sumar puntos si destruyo nave etc.

        configSpeed( cte rancia? ){
            speed canon= 5;
            speed alien= (speed alien + 5)^nivel
        }

    FUNCIONES QUE LLAMA EL BACK (definición en front):

        int init_all();
            @brief Inicializa los recursos a emplear.
            @return Si hubo o no error.
        
        MENU_ITEM* menu(MENU_ITEM[]);
            Se muestra el menú con las opciones pasadas.
            El front bloquea el programa en el menú hasta que se seleccione una opción
            Devuelve la opcion seleccionada como puntero a MENU_ITEM

        input_t getInput();
        
        int getColission(); // Cambiar int por un tipo de dato que identificque personajes
            Devuelve si hubo colisión, en caso de haberla, devuelve con qué choco

        destroyCanon();

        nextLevel();

        endGame();





        
FRONT:


    1) Para mostrar el menu desde el front crear una funcion que 
    use como prototipo de función:

    "void show_menu(MENU_ITEM *menu_to_show, int menu_size, int highlight_item)"

    donde menu_to_show es una estructura que tiene todas las opciones del
    menu a mostrar y menu_size la cantidad de opciones a mostrar.
    La estructura MENU_ITEM tiene un campo que es essential, si ese 
    campo esta en TRUE debe mostrarse la OPCION independientemente del 
    front, si es FALSE debe mostrarse solo si la plataforma lo permite. 
    Con una constante llamada ONLY_ESSENTIAL (la crean ustedes) que se define en 
    funcion de la plataforma, determinan si la plataforma puede mostrar las
    opciones no essencial o no. El parametro highlight_item resalta cual es el
    la opción actual.

    2) void destroy_front(): funcion que dependiendo del front cierra todo para 
    salir de la aplicación.

    3) int init_front(): funcion que dependiendo del front inicializa todo para 
    empezar a correr el juego. Devuelve 0 si no hay error, cualquier otra 
    cosa si hay error.

    4) void splash_front(): Muestra una pantalla de "carga" o  "premenu"
    de ser posible por el front.

    5) void show_game_score(unsigned long long int score):
    Debe mostrar en el front el puntaje de jugador.
    
    RASPI:

    ALLEGRO:

    static void destroy_all();
        @brief Destruye los recursos empleados.
    

    static void cargando_all()
        Refresca pantalla de allegro_wiki

    int getColission();
        
    (no se que) queue_all();
        La cola de eventos ya sea reconocimiento de teclado u otras funciones
    