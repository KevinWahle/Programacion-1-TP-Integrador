BACK: 


    FUNCIONES DEFINIDAS EN EL BACK:

        Main basarse en Advanced Finite State machine!!! 
        
        void vidas(int delta);
            Param delta: El cambio a aplicar a las vidas (1: suma vida, -1 resta vida, 0 mantiene vidas) 
        
        void menu (int option);
            Param option: case restart, case new game, case score, case return game;

        void onCollisionDetected(int isColission);        
            Param isColission: es avisada por el front si hubo colision o no.
            La funcion hace lo que deba hacer despues de una colision
            Decrementar vida, o sumar puntos si destruyo nave etc.

        configSpeed( cte rancia? ){
            speed canon= 5;
            speed alien= (speed alien + 5)^nivel
        }

    FUNCIONES QUE LLAMA EL BACK (definición en front):

LISTO    1) Para mostrar el menu desde el front crear una funcion que 
    use como prototipo de función:

    "void show_menu(MENU_ITEM *menu_to_show, int menu_size, int highlight_item)"

    donde menu_to_show es una estructura que tiene todas las opciones del
    menu a mostrar y menu_size la cantidad de opciones a mostrar.
    La estructura MENU_ITEM tiene un campo que es essential, si ese 
    campo esta en TRUE debe mostrarse la OPCION independientemente del 
    front, si es FALSE debe mostrarse solo si la plataforma lo permite. 
    Con una constante llamada ONLY_ESSENTIAL (la crean ustedes) que se define en 
    funcion de la plataforma, determinan si la plataforma puede mostrar las
    opciones no essencial o no. El parametro highlight_item resalta cual es el
    la opción actual.

LISTO    2) void destroy_front(): funcion que dependiendo del front cierra todo para 
    salir de la aplicación.

LISTO    3) int init_front(): funcion que dependiendo del front inicializa todo para 
    empezar a correr el juego. Devuelve 0 si no hay error, cualquier otra 
    cosa si hay error.

LISTO   4) void splash_front(): Muestra una pantalla de "carga" o  "premenu"
    de ser posible por el front.

    5) void game_score_front(unsigned long long int score, ...):
    Debe mostrar en el front las estadísticas de la partida una vez FINALIZADA.
    
    6) void update_front_event(void) agrega a la lista de eventos todos los 
    eventos que registre el front. 

    7) void speed_calculator(int speed) Recibe una velocidad relativa que va entre 1 y 100 
    y lo transforma a una velocidad real que depende del front.

    8) reset_front(void) Se llama cada vez que se empieza una partida nueva

    void redraw(void);
        Cede el control al front para imprimir en pantalla, detectar colisiones,
        agregar los eventos a la event_queue, etc, etc...
        OBS: el main del back NO DEBE SER BLOQUEANTE

LISTO    9) /**
 		* @brief Muestra imagen descore y muestra hasta top 10.
 		* @param score[] Recibe un puntero a esturctura de que tiene nombres ypuntajes
 		* @param size Recibe el tamaño actual de la lista de puntaje
	   */
		void show_score (SCORE* score ,int size);
		
LISTO	10) /**
 		* @brief Muestra las instrucciones.
		*/
		void shows_inst (void);
		
        update_speed_front(int newSpeed);
            // El back llama a esta función con la velocidad actualizada
            // Adentro de la función el front actualiza su propia velocidad (invaders, frecuencia de tiros, etc)

        destroyCanon();

        nextLevel();

        endGame();





        
FRONT:
    RASPI:

    ALLEGRO:

    static void destroy_all();
        @brief Destruye los recursos empleados.
    

    static void cargando_all()
        Refresca pantalla de allegro_wiki

    int getColission();
        
    (no se que) queue_all();
        La cola de eventos ya sea reconocimiento de teclado u otras funciones
    
o